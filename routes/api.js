// Generated by CoffeeScript 1.10.0
(function() {
  var _, bookModel, cryptoutil, express, fs, imageModel, multipart, multipartMiddleware, path, render, router, treeModel, updata;

  express = require('express');

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  updata = require('../tools/updata');

  cryptoutil = require('../tools/cryptoutil');

  treeModel = require('../models/tree');

  bookModel = require('../models/book');

  imageModel = require('../models/image');

  render = require('../tools/render');

  router = express.Router();

  multipart = require('connect-multiparty');

  multipartMiddleware = multipart({
    uploadDir: './public/files/'
  });

  router.get('/', function(req, res, next) {
    res.status(200).send('api状态正常');
  });

  router.get('/updataMenu', function(req, res, next) {
    updata.menu();
    res.send({
      status: 1,
      info: '请求成功'
    });
  });

  router.get('/search', function(req, res, next) {
    bookModel.findByName(req.query.s, function(err, book) {
      if (err) {
        console.log(err);
      }
      render.list(res, {
        title: '搜索结果',
        tree: req.tree,
        loginInfo: req.loginInfo,
        bookList: book
      });
    });
  });

  router.get('/getContent', function(req, res, next) {
    var buffStr;
    buffStr = fs.readFileSync(path.join(__dirname, '../doc/' + req.query.md + '.md'), 'utf8');
    res.send({
      content: buffStr,
      title: req.query.md.split('/')[req.query.md.split('/').length - 1] + '.md'
    });
  });

  router.post('/saveBookContent', function(req, res, next) {
    if (!req.loginInfo) {
      res.send({
        status: 0,
        info: '此方法需要登陆'
      });
    } else {
      fs.writeFile(decodeURI(path.join(__dirname, '../doc/' + req.body.md + '.md')), req.body.content, function(err) {
        if (err) {
          console.log(err);
          res.send({
            status: 0,
            info: '保存失败,请重试'
          });
        } else {
          updata.menu();
          res.send({
            status: 1,
            info: '保存成功'
          });
        }
      });
    }
  });

  router.post('/addFile', function(req, res, next) {
    var arr;
    if (!req.loginInfo) {
      res.send({
        status: 0,
        info: '此方法需要登陆'
      });
    } else {
      arr = req.body.file.split('/');
      arr.pop();
      arr = arr.join('/');
      fs.exists(path.join(__dirname, '../doc' + arr), function(exists) {
        if (!exists) {
          fs.mkdirSync(path.join(__dirname, '../doc' + arr));
          fs.exists(path.join(__dirname, '../doc' + req.body.file + '.md'), function(exists) {
            if (!exists) {
              fs.writeFile(decodeURI(path.join(__dirname, '../doc' + req.body.file + '.md')), '# Hello World! \n', function(err) {
                if (err) {
                  console.log(err);
                  res.send({
                    status: 0,
                    info: '文件写入错误'
                  });
                } else {
                  updata.menu();
                  res.send({
                    status: 1,
                    info: '创建成功',
                    url: 'book?md=' + req.body.file.substr(1)
                  });
                }
              });
            } else {
              res.send({
                status: 0,
                info: '文件存在,无法创建'
              });
            }
          });
        } else {
          fs.exists(path.join(__dirname, '../doc' + req.body.file + '.md'), function(exists) {
            if (!exists) {
              fs.writeFile(decodeURI(path.join(__dirname, '../doc' + req.body.file + '.md')), '# Hello World! \n', function(err) {
                if (err) {
                  console.log(err);
                  res.send({
                    status: 0,
                    info: '文件写入错误'
                  });
                } else {
                  updata.menu();
                  res.send({
                    status: 1,
                    info: '创建成功',
                    url: 'book?md=' + req.body.file.substr(1)
                  });
                }
              });
            } else {
              res.send({
                status: 0,
                info: '文件存在,无法创建'
              });
            }
          });
        }
      });
    }
  });

  router.get('/download', function(req, res, next) {
    var md;
    md = req.query.md;
    res.download(path.join(__dirname, '../doc/' + md + '.md'), md.split('/').pop() + '.md');
  });

  router.get('/delete', function(req, res, next) {
    var isEmpty, md;
    if (!req.loginInfo) {
      return res.send({
        status: 0,
        info: '此方法需要登陆'
      });
    } else {
      md = req.query.md;
      isEmpty = function(path, callback) {
        var dirList, newPath, status;
        status = true;
        callback = callback || function() {};
        dirList = fs.readdirSync(path);
        dirList.forEach(function(item) {
          if (fs.statSync(path + '/' + item).isDirectory()) {
            status = false;
            return false;
          } else {
            if (item.indexOf('.md') !== -1) {
              status = false;
              return false;
            }
          }
        });
        if (status) {
          fs.rmdir(path);
          newPath = path.split('/');
          newPath.pop();
          console.log(newPath.join('/'));
          return isEmpty(newPath.join('/'), callback);
        } else {
          return callback();
        }
      };
      fs.unlink(path.join(__dirname, '../doc/' + md + '.md'), function(err) {
        var dir;
        if (err) {
          console.log(err);
          return res.send({
            status: 0,
            info: '删除失败'
          });
        } else {
          console.log('文件' + md + '.md 删除成功!');
          bookModel.deleteByUrl(path.join(__dirname, '../doc/' + md + '.md'), function(err, book) {
            return console.log(err);
          });
          dir = md.split('/');
          dir.pop();
          return isEmpty(path.join(__dirname, '../doc/' + dir.join('/')), function() {
            updata.menu(req.httpPort);
            res.send({
              status: 1,
              info: '删除成功'
            });
          });
        }
      });
    }
  });

  router.post('/uploadImg', multipartMiddleware, function(req, res, next) {
    var fileName, newname, subname;
    if (!req.loginInfo) {
      return res.send({
        status: 0,
        info: '此方法需要登陆'
      });
    } else {
      if (req.body.name) {
        subname = req.body.name.split('.');
      } else {
        res.json({
          "status": 0,
          "url": ""
        });
      }
      newname = new Date().getTime();
      fileName = newname + '.' + subname[1];
      fs.rename(req.files.file.path, 'doc/images/' + fileName, function(err) {
        if (err) {
          console.log(err);
        }
        return cryptoutil.md5(fileName, function(md5) {
          return imageModel.findByHashCode(md5, function(err, image) {
            var newImage;
            if (err) {
              console.log(err);
            }
            if (image !== null) {
              return fs.unlink('doc/images/' + fileName, function() {
                return res.json({
                  "status": 1,
                  "url": image.url
                });
              });
            } else {
              newImage = new imageModel({
                name: fileName,
                hashCode: md5,
                url: '/images/' + fileName
              });
              return newImage.save(function(err, imagen) {
                if (err) {
                  console.log(err);
                }
                res.json({
                  "status": 1,
                  "url": '/images/' + fileName
                });
              });
            }
          });
        });
      });
    }
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=api.js.map
